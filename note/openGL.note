void glClearBufferfv(GLenum buffer, GLint drawBuffer, const GLfloat *value)

------- shader ------
glCreateShader:		创建新的shader对象
glShaderSource:		将shader源码设置给shader对象
glCompileShader:	编译shader对象的源码
glDeleteShader:		删除shader对象,对象附属到program对象后即可删除

OpenGL Pipeline:
front end:
	1.vertex shader
	2.tessellation control shader
	3.tessellation envalution shader
	4.gemetry shader
		每个图元运行一次，访问这个图元的所有顶点，能显示的增加或减少管线的数据。
		能在管线中改变图元模式

	5.primitive assembly 图元装配
	6.clipping
	7.viewport transformation
	8.culling
	9.rasterization

	10.fragment shader

------- program -------
glCreateProgram:	创建一个program对象
glAttachShader:		将一个shader对象附属在program对象上
glLinkProgram:		将所有的shader对象一起附属到program对象上

------- vertex array object -------
glCreateVertexArrays:	创建VAO对象
glBindVertexArray:		将VAO对象绑定到上下文

------- OpenGL Draw -------
glDrawArrays: 

* Points:
glPointSize 指定画的点的大小


------- vertex attributes -------
glVertexAttrib4fv(GLuint index, const GLfloat *v): 设置顶点属性


------- Tessellation Shader -------
tessellation 的作用时将高阶图元patches打破成points, lines, or triangles.
void glPatchParameteri() 设置每个patch的控制点




-------- Data -------
1. How to create buffer and textures that you can use to 
store data that your program can access.

2. How to get OpenGL to supply the values of your vertex
attributes automatically.

3. How to access textures and buffers from your shaders.

Buffer
	glCreateBuffers:	创建buffer对象
	glBindBuffer:	　	绑定buffer对象到当前的opengGL上下文

	glBufferStorage:		为buffer对象申请内存
	glNamedBufferStorage

	glMapNamedBuffer:	映射buffer对象的内存
	glMapBuffer
	glUnmapNamedBuffer
	glUnmapBuffer
	glMapBufferRange
	glMapNamedBuffer

	




































o
